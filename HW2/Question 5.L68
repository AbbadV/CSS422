00000400 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 4/26/2016 12:32:50 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : Decode a Floating Point Number
00000000                             3  * Written by : Tyler Quayle
00000000                             4  * Date       : April 22, 2016
00000000                             5  * Description: Given 32-Bit Floating point Hexadecimal, give sign, exponent, mantissa
00000000                             6  *-----------------------------------------------------------
00000000  =00000580                  7  SignBit     EQU $580
00000000  =00000582                  8  Exponent    EQU $582
00000000  =00000584                  9  Mantissa    EQU $584
00000400                            10      ORG    $400
00000400                            11  START:                  ; first instruction of program
00000400                            12  
00000400                            13  * Put program code here
00000400  43F9 00000502             14      LEA     InMsg, A1   * Insert Msg to prompt user into A1 for display
00000406  103C 000E                 15      MOVE.B  #14, D0     * Task 14, Trap 15 - Display NULL terminate Sting, no CR/LF
0000040A  4E4F                      16      TRAP    #15         * Display Prompt
0000040C  103C 0002                 17      MOVE.B  #2, D0      * Task 2 for Trap 15, Read in String
00000410  4E4F                      18      TRAP    #15         * Get User input
00000412                            19  
00000412  2A7C 0000056A             20      MOVEA.L #$56A, A5   * Give A5 Starting Address   
00000418  143C 0009                 21      MOVE.B  #9, D2      * D2 used for Looping 8 times 
0000041C                            22  
0000041C                            23  CONVERT * For(D2 = 8, D2 > 0, D2--)  
0000041C  1819                      24      MOVE.B  (A1)+,D4    * Give D4 first Byte of user input, then increment
0000041E                            25      
0000041E  5302                      26      SUB.B   #1, D2      * For Loop decrement
00000420  B43C 0000                 27      CMP.B   #0, D2      * Check for end of For-Loop
00000424  6700 0038                 28      BEQ     MOVEBITS    * Conversion Done, Go To Movebits
00000428                            29   
00000428  B83C 0040                 30      CMP.B   #$40, D4    * Compare if D4 contains greater than $40 (A = $41, B = $42)
0000042C  6E00 000A                 31      BGT     CONV_LETTER * Letter Possibly Found, go to Conv_Letter to Confirm
00000430                            32      
00000430  B83C 003A                 33      CMP.B   #$3A, D4    * Compare D4 if less than $3A (Hex for :) (9 = $39, 8 = $38) 
00000434  6D00 0012                 34      BLT     CONV_NUMBER * Number possibly Found, go to Conv_Number to Confirm
00000438                            35      
00000438                            36  CONV_LETTER
00000438  B83C 0046                 37      CMP.B   #$46, D4    * Check to see if D4 falls within $41-$46 (A-F)
0000043C  6E00 001A                 38      BGT     MISSING     * Not $41-$46 (HEX A-F), Bad/No Data, Jump to Missing
00000440  0404 0037                 39      SUB.B   #$37, D4    * Subtract $37, to convert (ASCII->HEX)
00000444  1AC4                      40      MOVE.B  D4, (A5)+   * Give current A5 the D4 hex value and Increment
00000446  60D4                      41      BRA CONVERT         * Successfully Convert (ASCII->HEX), Branch back to Convert Loop
00000448                            42  
00000448                            43  CONV_NUMBER
00000448  B83C 0030                 44      CMP.B   #$30, D4    * Check to see if D4 falls within $30-$39 (0-9)    
0000044C  6D00 000A                 45      BLT     MISSING     * Not $30-$39 (HEX 0-9), Bad/No Data, Jump to Missing
00000450  0404 0030                 46      SUB.B   #$30, D4    * Subtract $30, to convert (ASCII->HEX)
00000454  1AC4                      47      MOVE.B  D4, (A5)+   * Give current A5 the D4 hex value and Increment
00000456  60C4                      48      BRA CONVERT         * Successfully Convert (ASCII->HEX), Branch back to Convert Loop
00000458                            49  
00000458                            50  MISSING * Here in case user did not enter 8 numbers, 'fills' rest with 0's
00000458  1AFC 0000                 51      MOVE.B  #$00, (A5)+ * Give Current address Byte value $00, increment A5
0000045C  60BE                      52      BRA CONVERT         * Branch back to Convert Loop
0000045E                            53  
0000045E                            54  MOVEBITS
0000045E  2A7C 0000056A             55      MOVEA.L #$56A, A5   * Reset A5 to starting address
00000464  143C 0005                 56      MOVE.B  #5, D2      * Give D2 $5, used in MOVELOOP logic
00000468                            57  
00000468                            58  MOVELOOP * For(D2 = 5, D2 > 0, D2--)
00000468  5302                      59      SUB.B   #1, D2      * For Loop decrement
0000046A  B43C 0000                 60      CMP.B   #0, D2      * Check if conditions have been met
0000046E  6700 000E                 61      BEQ     FINDSIGN    * Bit moving done, D4 Now contains correct 32-Bit Hex
00000472  161D                      62      MOVE.B (A5)+, D3    * Move Current Byte into D3
00000474  E98B                      63      LSL.L   #4, D3      * Logical Shift Bits 1 Nibble Left (0X->X0)
00000476  D61D                      64      ADD.B  (A5)+,D3     * Add next Byte into Bit Shifted D3(XX)
00000478  E18C                      65      LSL.L   #8, D4      * Logical Shift D4 1 Byte (00XX->XX00)
0000047A  D803                      66      ADD.B   D3, D4      * Add D3 Byte to D4 (XXXX)
0000047C  60EA                      67      BRA MOVELOOP        * Repeat Loop
0000047E                            68      
0000047E                            69  FINDSIGN
0000047E  2604                      70      MOVE.L  D4, D3          * Move D4(User Hex Value) into D3 for manipulation
00000480  143C 001F                 71      MOVE.B  #31, D2         * Move 31 into D2, used for Following Logic Shift 
00000484  E5AB                      72      LSL.L   D2, D3          * Logic-Shift-Left 31, leaving only MSB
00000486  11FC 002D 0580            73      MOVE.B  #$2D, SignBit   * Default to $2D (Hex for '-')
0000048C  B63C 0001                 74      CMP.B   #$1, D3         * Compare D3 to 1 (check for negative input)
00000490  6700 0008                 75      BEQ     FINDEXP         * If MSB was negative, continue
00000494  11FC 002B 0580            76      MOVE.B  #$2B, SignBit   * MSB was 0, change Sign to $2B (Hex for '+')
0000049A                            77  FINDEXP
0000049A  2604                      78      MOVE.L  D4, D3          * Move D4(User Hex Value) into D3 for manipulation
0000049C  0883 001F                 79      BCLR.L  #31, D3         * Clear MSB
000004A0  143C 0017                 80      MOVE.B  #23, D2         * Move 23 into D2, 
000004A4  E4AB                      81      LSR.L   D2, D3          * Logic-Shift-Right 23 || Get rid of Mantissa
000004A6  31C3 0582                 82      MOVE.W  D3, Exponent    * Give variable Exponent the value in D3
000004AA                            83  FINDMAN
000004AA  2604                      84      MOVE.L  D4, D3          * Move D4(User Hex Value) into D3 for manipulation
000004AC  143C 0009                 85      MOVE.B  #9, D2          * Move 9 into D2, Used for Following Logic Shift
000004B0  E5AB                      86      LSL.L   D2, D3          * Logic-Shift-Left 9,
000004B2  143C 001C                 87      MOVE.B  #28, D2         * Move 28 into D2, Used for following logic shift
000004B6  E4AB                      88      LSR.L   D2, D3          * Logic-Shift-Right 28, moving first 4 bits of decimals into D3.B
000004B8  31C3 0584                 89      MOVE.W  D3, Mantissa    * Give variable Mantissa value in D3
000004BC                            90      
000004BC                            91  PRINT
000004BC  43F9 00000543             92      LEA     OutSig, A1      * Load OutSig message into A1 for display
000004C2  103C 000E                 93      MOVE.B  #14, D0         * Task 14, Trap 15 - Display NULL terminate Sting, no CR/LF
000004C6  4E4F                      94      TRAP    #15             * Display OutSig (Sign) message
000004C8  1238 0580                 95      MOVE.B  SignBit, D1     * Move variable SignBit into D1 for display
000004CC  103C 0006                 96      MOVE.B  #6, D0          * Task 6, Trap 15 - Display Single Char in D1 (Hex code for +/-)
000004D0  4E4F                      97      TRAP    #15             * Display char in D1, Hex value for either '+' or '-'
000004D2                            98      
000004D2  43F9 00000550             99      LEA     OutExp, A1      * Load OutExp message into A1 for display
000004D8  103C 000E                100      MOVE.B  #14, D0         * Task 14, Trap 15 - Display NULL terminate Sting, no CR/LF      
000004DC  4E4F                     101      TRAP    #15             * Display OutExp (Exponent) message
000004DE  3238 0582                102      MOVE.W  Exponent, D1    * Move variable Exponent into D1 for display
000004E2  103C 0003                103      MOVE.B  #3, D0          * Task 3, Trap 15 - Display Value in D1 as Decimal
000004E6  4E4F                     104      TRAP    #15             * Display variable Exponent
000004E8                           105      
000004E8  43F9 0000055D            106      LEA     OutMan, A1      * Load OutMan message into A1 for display
000004EE  103C 000E                107      MOVE.B  #14, D0         * Task 14, Trap 15 - Display NULL terminate Sting, no CR/LF
000004F2  4E4F                     108      TRAP    #15             * Display OutMan
000004F4  3238 0584                109      MOVE.W  Mantissa, D1    * Move variable Mantissa into D1 for display
000004F8  103C 0003                110      MOVE.B  #3, D0          * Task 3, Trap 15 - Display Value in D1 as Decimal
000004FC  4E4F                     111      TRAP    #15             * Display variable mantissa
000004FE                           112   
000004FE  FFFF FFFF                113      SIMHALT             ; halt simulator
00000502                           114  
00000502                           115  *---------OutPut Values--------------------------------------------------------
00000502  =0000000D                116  CR      EQU $0D             ;ASCII code for Carriage Return
00000502  =0000000A                117  LF      EQU $0A             ;ASCII code for Line Feed
00000502= 0D 50 6C 65 61 73 ...    118  InMsg   DC.B CR,'Please enter IEEE 32-bit floating point number in hexadecimal: ' ,0
00000543= 0D 0A 53 69 67 6E ...    119  OutSig  DC.B CR, LF,'Sign Bit: ',0
00000550= 0D 0A 45 78 70 6F ...    120  OutExp  DC.B CR, LF,'Exponent: ',0
0000055D= 0D 0A 4D 61 6E 74 ...    121  OutMan  DC.B CR, LF,'Mantissa: ',0
0000056A                           122  
0000056A                           123  * Put variables and constants here
0000056A                           124  
0000056A                           125      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
CONVERT             41C
CONV_LETTER         438
CONV_NUMBER         448
CR                  D
EXPONENT            582
FINDEXP             49A
FINDMAN             4AA
FINDSIGN            47E
INMSG               502
LF                  A
MANTISSA            584
MISSING             458
MOVEBITS            45E
MOVELOOP            468
OUTEXP              550
OUTMAN              55D
OUTSIG              543
PRINT               4BC
SIGNBIT             580
START               400
